
import React, { useEffect } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Form } from '@/components/ui/form';
import { AIModel } from '@/types/ai-types';
import { modelFormSchema } from './schema/modelFormSchema';

// Form field components
import ModelNameField from './form-fields/ModelNameField';
import ModelDescriptionField from './form-fields/ModelDescriptionField';
import ModelTypeField from './form-fields/ModelTypeField';
import ApiKeyField from './form-fields/ApiKeyField';
import BasePromptField from './form-fields/BasePromptField';
import FormActions from './form-fields/FormActions';
import ModelConfigurationField from './form-fields/ModelConfigurationField';

interface ModelFormProps {
  open?: boolean;
  onClose: () => void;
  onSubmit: (data: AIModel) => void;
  model: AIModel | null;
}

const defaultValues = {
  name: '',
  description: '',
  type: 'openai' as const,
  apiKey: '',
  basePrompt: 'You are a helpful AI assistant.',
  configuration: {
    temperature: 0.7,
    maxTokens: 1000,
    topP: 1.0,
  },
};

const ModelForm: React.FC<ModelFormProps> = ({ open = false, onClose, onSubmit, model }) => {
  const form = useForm<z.infer<typeof modelFormSchema>>({
    resolver: zodResolver(modelFormSchema),
    defaultValues: model ? {
      name: model.name,
      description: model.description,
      type: model.type,
      apiKey: model.apiKey,
      basePrompt: model.basePrompt,
      configuration: model.configuration,
    } : defaultValues,
  });
  
  useEffect(() => {
    if (model) {
      form.reset({
        name: model.name,
        description: model.description,
        type: model.type,
        apiKey: model.apiKey,
        basePrompt: model.basePrompt,
        configuration: model.configuration,
      });
    } else {
      form.reset(defaultValues);
    }
  }, [model, form]);
  
  // If not open, don't render the form
  if (!open) return null;
  
  const handleSubmit = (values: z.infer<typeof modelFormSchema>) => {
    // Convert form values to AIModel format
    const modelData: AIModel = {
      id: model?.id || '', // Will be generated by backend for new models
      name: values.name, // Explicitly include name as non-optional
      description: values.description,
      type: values.type,
      apiKey: values.apiKey,
      basePrompt: values.basePrompt || '',
      configuration: values.configuration,
      isActive: model?.isActive ?? true,
      isDefault: model?.isDefault ?? false,
    };
    
    onSubmit(modelData);
  };
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-6">
            <ModelNameField />
            <ModelTypeField />
            <ApiKeyField />
          </div>
          
          <div className="space-y-6">
            <ModelDescriptionField />
            <BasePromptField />
          </div>
        </div>
        
        <ModelConfigurationField />
        
        <FormActions 
          onCancel={onClose}
          isSubmitting={form.formState.isSubmitting}
          isEditing={!!model}
        />
      </form>
    </Form>
  );
};

export default ModelForm;
